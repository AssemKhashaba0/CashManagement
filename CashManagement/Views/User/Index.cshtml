@model IEnumerable<CashManagement.Controllers.UserViewModel>

@{
    ViewData["Title"] = "قائمة المستخدمين";
    Layout = "/Views/Shared/_LayoutDashbord.cshtml";

    // Calculate user roles counts
    var adminCount = Model.Count(u => u.Role == "Admin");
    var employeeCount = Model.Count(u => u.Role == "Employee"); // Assuming 'Employee' is the role name

    // Define controller name as a C# variable
    var currentControllerName = "User"; // <--- Add this line
}

<style>
    /* Custom CSS for the specified color palette and enhanced design */
    :root {
        --primary-color: #1E3A8A; /* Dark Blue */
        --secondary-color: #3B82F6; /* Light Blue */
        --background-color: #1F2937; /* Dark Gray - Main body background */
        --card-background-color: #2D3748; /* Slightly lighter dark gray for cards */
        --accent-color: #34D399; /* Mint Green */
        --error-color: #F87171; /* Coral Red */
        --text-color: #F3F4F6; /* Off-white */
        --muted-text-color: #A0AEC0; /* Light gray for secondary text */
    }

    body {
        background-color: var(--background-color);
        color: var(--text-color);
    }

    h2 {
        color: var(--text-color);
        margin-bottom: 25px;
        text-align: center;
        font-weight: 700;
    }

    /* Info Cards for User Counts */
    .info-card {
        background-color: var(--card-background-color);
        color: var(--text-color);
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        text-align: center;
        transition: transform 0.2s ease-in-out;
    }
    .info-card:hover {
        transform: translateY(-5px);
    }
    .info-card h4 {
        color: var(--secondary-color);
        margin-bottom: 10px;
    }
    .info-card p {
        font-size: 2.2em;
        font-weight: bold;
        color: var(--accent-color);
    }

    /* Main Action Button (Add New User) */
    .btn-primary-custom {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 10px 20px;
        font-size: 1.1em;
    }

    .btn-primary-custom:hover {
        background-color: #2A52A3; /* Slightly darker primary on hover */
        border-color: #2A52A3;
        transform: translateY(-2px);
        color: white; /* Ensure text remains white on hover */
    }

    /* Alert Styling */
    .alert-success {
        background-color: var(--accent-color);
        color: #1F2937; /* Dark text for success alert */
        border-color: var(--accent-color);
    }

    .alert-danger {
        background-color: var(--error-color);
        color: #1F2937; /* Dark text for error alert */
        border-color: var(--error-color);
    }

    /* User Card Styling */
    .user-card {
        background-color: var(--card-background-color);
        border-radius: 10px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.35);
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%; /* Ensure cards in a row have equal height */
    }

    .user-card h5 {
        color: var(--text-color);
        font-weight: bold;
        margin-bottom: 10px;
    }

    .user-card p {
        color: var(--muted-text-color);
        margin-bottom: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .user-card .card-body {
        flex-grow: 1; /* Allow card body to expand */
    }

    .user-card .card-footer {
        background-color: transparent;
        border-top: 1px solid #3B4553; /* Subtle border above actions */
        padding-top: 15px;
        margin-top: 15px;
        display: flex;
        flex-wrap: wrap; /* Allow buttons to wrap */
        gap: 10px; /* Space between buttons */
        justify-content: center; /* Center buttons horizontally */
    }

    /* Icon Buttons */
    .btn-icon {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        color: white;
        width: 40px; /* Fixed width for icon buttons */
        height: 40px; /* Fixed height for icon buttons */
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%; /* Make them circular */
        padding: 0; /* Remove default padding */
        font-size: 1.1em;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
    .btn-icon:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }

    .btn-details {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
    }
    .btn-details:hover {
        background-color: #5C9EFF;
        border-color: #5C9EFF;
    }

    .btn-edit {
        background-color: #F6AD55; /* A warm orange for warning/edit */
        border-color: #F6AD55;
    }
    .btn-edit:hover {
        background-color: #F9B86D;
        border-color: #F9B86D;
    }

    .btn-freeze {
        background-color: var(--error-color);
        border-color: var(--error-color);
    }
    .btn-freeze:hover {
        background-color: #FF8F8F;
        border-color: #FF8F8F;
    }

    .btn-unfreeze {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
    }
    .btn-unfreeze:hover {
        background-color: #4EE2AD;
        border-color: #4EE2AD;
    }

    .btn-delete {
        background-color: #DC3545; /* Bootstrap default red for delete */
        border-color: #DC3545;
    }
    .btn-delete:hover {
        background-color: #C82333;
        border-color: #C82333;
    }


    /* Role Badges */
    .badge-admin {
        background-color: var(--primary-color); /* Admin role distinguished */
        color: var(--text-color);
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.85em;
    }

    .badge-employee {
        background-color: var(--secondary-color); /* Employee role */
        color: var(--text-color);
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.85em;
    }

    .badge-status-active {
        background-color: var(--accent-color);
        color: #1F2937;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.85em;
    }

    .badge-status-frozen {
        background-color: var(--error-color);
        color: #1F2937;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 0.85em;
    }

    /* Modal Styling */
    .modal-content {
        background-color: var(--card-background-color);
        color: var(--text-color);
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.4);
    }
    .modal-header {
        border-bottom-color: #3B4553;
        padding: 20px;
    }
    .modal-title {
        color: var(--text-color);
    }
    .modal-body {
        padding: 20px;
    }
    .modal-footer {
        border-top-color: #3B4553;
        padding: 20px;
    }
    .modal-footer .btn {
        padding: 8px 20px;
    }
    .btn-secondary {
        background-color: var(--muted-text-color);
        border-color: var(--muted-text-color);
        color: #1F2937; /* Dark text for contrast */
    }
    .btn-secondary:hover {
        background-color: #C1C6CC;
        border-color: #C1C6CC;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .user-card .card-footer {
            flex-direction: row; /* Keep buttons in a row if space allows */
            justify-content: center;
        }
        .btn-icon {
            width: 35px;
            height: 35px;
            font-size: 1em;
        }
    }

    @@media (max-width: 576px) {
        .info-card p {
            font-size: 1.8em;
        }
        .user-card .card-footer {
            flex-direction: column; /* Stack buttons on very small screens */
            gap: 8px;
        }
        .btn-icon {
            width: 100%; /* Make icon buttons full width on very small screens */
            border-radius: 8px; /* Make them rectangular */
            height: auto;
            padding: 8px 0; /* Add vertical padding */
        }
    }
</style>

<div class="d-flex justify-content-center align-items-center mb-4 flex-wrap" dir="rtl">
    <h2 class="w-100">قائمة المستخدمين</h2>
    <div class="row w-100 justify-content-center mb-3 g-3">
        <div class="col-6 col-md-4 col-lg-3">
            <div class="info-card">
                <h4>عدد المدراء (Admin)</h4>
                <p>@adminCount</p>
            </div>
        </div>
        <div class="col-6 col-md-4 col-lg-3">
            <div class="info-card">
                <h4>عدد الموظفين (Employee)</h4>
                <p>@employeeCount</p>
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-end mb-4" dir="rtl">
    <a asp-action="Create" class="btn btn-primary-custom">
        <i class="fas fa-user-plus"></i>
        إضافة مستخدم جديد
    </a>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert" dir="rtl">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="إغلاق"></button>
    </div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert" dir="rtl">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="إغلاق"></button>
    </div>
}

<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" dir="rtl">
    @foreach (var user in Model)
    {
        <div class="col">
            <div class="user-card">
                <div class="card-body">
                    <h5><i class="fas fa-user"></i> @user.FullName</h5>
                    <p><i class="fas fa-envelope"></i> @user.Email</p>
                    <p><i class="fas fa-user-tag"></i> @user.UserName</p>
                    <p>
                        <i class="fas fa-id-badge"></i> الدور:
                        <span class="badge @(user.Role == "Admin" ? "badge-admin" : "badge-employee")">
                            @user.Role
                        </span>
                    </p>
                    <p>
                        <i class="fas fa-toggle-on"></i> الحالة:
                        <span class="badge @(user.IsActive ? "badge-status-active" : "badge-status-frozen")">
                            @(user.IsActive ? "نشط" : "مجمد")
                        </span>
                    </p>
                    <p><i class="fas fa-calendar-alt"></i> تاريخ الإنشاء: @user.CreatedAt.ToString("dd/MM/yyyy")</p>
                </div>
                <div class="card-footer">
                    <a asp-action="Show" asp-route-id="@user.Id" class="btn btn-icon btn-details" title="تفاصيل">
                        <i class="fas fa-info"></i>
                    </a>
                    <a asp-action="Edit" asp-route-id="@user.Id" class="btn btn-icon btn-edit" title="تعديل">
                        <i class="fas fa-edit"></i>
                    </a>
                    @if (user.IsActive)
                    {
                        <button type="button" class="btn btn-icon btn-freeze" title="تجميد" data-bs-toggle="modal" data-bs-target="#confirmActionModal"
                                data-user-id="@user.Id" data-action-type="freeze" data-user-name="@user.FullName">
                            <i class="fas fa-pause"></i>
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-icon btn-unfreeze" title="إلغاء التجميد" data-bs-toggle="modal" data-bs-target="#confirmActionModal"
                                data-user-id="@user.Id" data-action-type="unfreeze" data-user-name="@user.FullName">
                            <i class="fas fa-play"></i>
                        </button>
                    }
                    <button type="button" class="btn btn-icon btn-delete" title="حذف" data-bs-toggle="modal" data-bs-target="#confirmActionModal"
                            data-user-id="@user.Id" data-action-type="delete" data-user-name="@user.FullName">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<div class="modal fade" id="confirmActionModal" tabindex="-1" aria-labelledby="confirmActionModalLabel" aria-hidden="true" dir="rtl">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmActionModalLabel">تأكيد الإجراء</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
            </div>
            <div class="modal-body">
                <p id="modalActionMessage"></p>
                <input type="hidden" name="id" id="modalUserId" />
                @Html.AntiForgeryToken()
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" id="confirmActionButton">تأكيد</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var confirmActionModalElement = document.getElementById('confirmActionModal');
            var confirmActionButton = document.getElementById('confirmActionButton');

            // Initialize Bootstrap Modal
            var confirmActionModal = new bootstrap.Modal(confirmActionModalElement);

            // Store the current action URL and HTTP method
            let currentActionUrl = '';
            let currentHttpMethod = 'POST'; // Default to POST for form submissions

            confirmActionModalElement.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget; // Button that triggered the modal
                var userId = button.getAttribute('data-user-id');
                var actionType = button.getAttribute('data-action-type');
                var userName = button.getAttribute('data-user-name');

                var modalTitle = confirmActionModalElement.querySelector('.modal-title');
                var modalActionMessage = confirmActionModalElement.querySelector('#modalActionMessage');
                var modalUserIdInput = confirmActionModalElement.querySelector('#modalUserId');

                modalUserIdInput.value = userId;

                let actionText = '';
                let confirmButtonClass = '';
                // No longer need 'let controllerName = "User";' here in JavaScript
                // The URL is generated by Razor on the server side

                switch (actionType) {
                    case 'freeze':
                        actionText = `هل أنت متأكد من تجميد حساب المستخدم <strong>${userName}</strong>؟`;
                        currentActionUrl = `@Url.Action("Freeze", currentControllerName)`; // Use C# variable here
                        currentHttpMethod = 'POST';
                        confirmButtonClass = 'btn-danger';
                        break;
                    case 'unfreeze':
                        actionText = `هل أنت متأكد من إلغاء تجميد حساب المستخدم <strong>${userName}</strong>؟`;
                        currentActionUrl = `@Url.Action("Unfreeze", currentControllerName)`; // Use C# variable here
                        currentHttpMethod = 'POST';
                        confirmButtonClass = 'btn-success';
                        break;
                    case 'delete':
                        actionText = `هل أنت متأكد من حذف حساب المستخدم <strong>${userName}</strong> بشكل نهائي؟ هذا الإجراء لا يمكن التراجع عنه.`;
                        currentActionUrl = `@Url.Action("Delete", currentControllerName)`; // Use C# variable here
                        currentHttpMethod = 'POST';
                        confirmButtonClass = 'btn-danger';
                        break;
                    default:
                        actionText = 'هل أنت متأكد من هذا الإجراء؟';
                        currentActionUrl = ''; // No action defined by default
                        currentHttpMethod = 'POST';
                        confirmButtonClass = 'btn-primary';
                        break;
                }

                modalTitle.textContent = `تأكيد ${actionType === 'freeze' ? 'التجميد' : actionType === 'unfreeze' ? 'إلغاء التجميد' : 'الحذف'}`;
                modalActionMessage.innerHTML = actionText;

                // Update confirm button style
                confirmActionButton.className = `btn ${confirmButtonClass}`; // Reset classes and apply new one
                confirmActionButton.textContent = 'تأكيد'; // Ensure text is reset
            });

            // Handle the click on the confirm button
            confirmActionButton.addEventListener('click', function () {
                if (currentActionUrl) {
                    // Create a hidden form dynamically to submit the POST request
                    const form = document.createElement('form');
                    form.method = currentHttpMethod;
                    form.action = currentActionUrl;
                    form.style.display = 'none'; // Hide the form

                    // Add UserId input
                    const userIdInput = document.createElement('input');
                    userIdInput.type = 'hidden';
                    userIdInput.name = 'id';
                    userIdInput.value = document.getElementById('modalUserId').value;
                    form.appendChild(userIdInput);

                    // Add Anti-forgery token
                    const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (antiForgeryToken) {
                        const tokenInput = document.createElement('input');
                        tokenInput.type = 'hidden';
                        tokenInput.name = '__RequestVerificationToken';
                        tokenInput.value = antiForgeryToken.value;
                        form.appendChild(tokenInput);
                    }

                    document.body.appendChild(form);
                    form.submit(); // Submit the form
                }
            });
        });
    </script>
}
